plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.6'
        id 'com.github.johnrengelman.shadow' version '8.1.1'

}

group = 'org.ngengine.demo'       // ← Set this to your actual group ID
version = '0.1.0-SNAPSHOT'        // ← Bump as needed

repositories {
    mavenCentral()
    // If you publish some of these projects locally, you might also want:
    // mavenLocal()
}
 
application {
    // Newer Gradle prefers this block over the old `mainClassName` property
    mainClass = 'org.ngengine.demo.son.SonGame'
}

dependencies {
    api 'org.ngengine:nge-platform-jvm:0.0.0-SNAPSHOT'
    api project(':nge-core')
    api project(':jme3-desktop')
    api project(':jme3-effects')
    api project(':jme3-lwjgl3')
    api project(':nge-networking')
    api project(':nge-ui')
    api project(':nge-auth')
    api project(':jme3-jbullet')
    implementation project(':jme3-jogg')
    implementation project(':jme3-plugins')
    implementation project(':jme3-plugins-json')
    implementation project(':jme3-plugins-json-gson')
    implementation 'org.sejda.imageio:webp-imageio:0.1.6'
}

// --------------------
// Javadoc adjustments
// --------------------
javadoc {
    // Disable doclint for JDK8+.
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// ------------------------------
// GraalVM Native Image settings
// ------------------------------
graalvmNative {
        toolchainDetection = true

    // Enable metadata repository so that native plugins can look up annotation metadata
    metadataRepository {
        enabled = true
    }

    binaries {
        main {
            imageName = "${project.name}-${org.gradle.internal.os.OperatingSystem.current().getName().toLowerCase()}"
            mainClass = 'org.ngengine.demo.son.SonGame'

            buildArgs.addAll([
                '--report-unsupported-elements-at-runtime',
                '--install-exit-handlers',
                '--add-exports=java.desktop/sun.awt=ALL-UNNAMED',
                '--add-exports=java.desktop/sun.java2d=ALL-UNNAMED',
                '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED',
                '-H:+ReportExceptionStackTraces',
                '-H:+PrintClassInitialization',
                '--initialize-at-run-time=' + file("${project.projectDir}/graal.initialize-at-runtime.conf").text.split('\n').join(','),
                '--no-server',
                '--enable-url-protocols=http,https,file',
                '--link-at-build-time',
                '-H:+UnlockExperimentalVMOptions',
                '--enable-native-access=ALL-UNNAMED',
                '-H:+StaticExecutableWithDynamicLibC', 
                '--gc=G1',
                '-march=compatibility',
                '-Djava.awt.headless=true',
                '-H:IncludeResources=.*',
                '-H:Name=' + "songame-${org.gradle.internal.os.OperatingSystem.current().getName().toLowerCase()}",
                "-H:ConfigurationFileDirectories=${project.projectDir}/trace"

            ])

      
            sharedLibrary = false

       
        }
    }
}

task createPgoProfile(type: JavaExec) {
    mainClass = 'org.ngengine.demo.son.SonGame'
    classpath = sourceSets.main.runtimeClasspath
    
    jvmArgs = [
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+EnableJVMCI',
        '-XX:+UseJVMCICompiler',
        '-Dgraal.PGOInstrument=graal.iprof', 
        '-Djava.awt.headless=true'
    ]
    
    doFirst {
        println "Creating PGO profile..."
        println "Exercise ALL features thoroughly!"
        println "Profile saved to: graal.iprof"
    }
}
 task traceNative(type: JavaExec) {
    group = 'graalvm'
    description = 'Trace reflection and resource usage'

    mainClass = 'org.ngengine.demo.son.SonGame'
    classpath = sourceSets.main.runtimeClasspath

    // Both output and merge directories - this is key!
    jvmArgs = [
        "-agentlib:native-image-agent=config-merge-dir=${project.projectDir}/trace",
        '-Djava.awt.headless=true'
    ]

    systemProperty 'java.awt.headless', 'false'
    systemProperty 'testMode', 'true'

    doFirst {
        println "Tracing to: ${project.projectDir}/trace"
        println "Run the application and exercise ALL features:"
        println "- Load different asset types (textures, models, sounds)"
        println "- Use UI components"
        println "- Trigger network operations"
        println "- Test different game states"
        println "Then close the application normally."
    }

    doLast {
        println "Tracing complete! Generated/updated files:"
        fileTree("${project.projectDir}/trace").each { file ->
            if (file.isFile()) {
                println "  - ${file.name} (${file.length()} bytes)"
            }
        }
    }
}

task buildNativeExecutable {
    group = 'graalvm'
    description = 'Build native executable for current platform'
    dependsOn 'nativeCompile' 

    doLast {
        def buildDirNative = "${project.buildDir}/native/nativeCompile"
        def executableName = graalvmNative.binaries.main.imageName.get()

        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            executableName += '.exe'
        }

        println "Native executable built: ${buildDirNative}/${executableName}"
    }
}

shadowJar {
    archiveBaseName = "${project.name}"
    archiveClassifier = 'fat'
    archiveVersion = "${project.version}"
    manifest {
        attributes 'Main-Class': 'org.ngengine.demo.son.SonGame'
    }
    mergeServiceFiles()
}

build.dependsOn shadowJar
